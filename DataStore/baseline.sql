-- DROP SCHEMA public;

CREATE SCHEMA IF NOT EXISTS public;

COMMENT ON SCHEMA public IS 'standard public schema';

-- DROP SEQUENCE public.auth_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.auth_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.favorites_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.favorites_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.level_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.level_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.level_item_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.level_item_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.level_metadata_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.level_metadata_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.level_points_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.level_points_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.media_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.media_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.personal_bests_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.personal_bests_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.player_points_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.player_points_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.records_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.records_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.requests_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.requests_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.upvotes_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.upvotes_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.users_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.users_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.versions_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.versions_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.vote_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.vote_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.world_records_id_seq;

CREATE SEQUENCE IF NOT EXISTS public.world_records_id_seq
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 2147483647
    START 1
	CACHE 1
	NO CYCLE;-- public."VersionInfo" definition

-- Drop table

-- DROP TABLE public."VersionInfo";

CREATE TABLE IF NOT EXISTS public."VersionInfo" (
                                      "Version" int8 NOT NULL,
                                      "AppliedOn" timestamp NULL,
                                      "Description" varchar(1024) NULL
);
CREATE UNIQUE INDEX IF NOT EXISTS "UC_Version" ON public."VersionInfo" USING btree ("Version");


-- public."level" definition

-- Drop table

-- DROP TABLE public."level";

CREATE TABLE IF NOT EXISTS public."level" (
                                id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                hash text NOT NULL,
                                date_created timestamptz NOT NULL,
                                date_updated timestamptz NULL,
                                CONSTRAINT level_pk UNIQUE (hash),
                                CONSTRAINT level_pkey PRIMARY KEY (id)
);


-- public.level_request definition

-- Drop table

-- DROP TABLE public.level_request;

CREATE TABLE IF NOT EXISTS public.level_request (
                                      id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                      workshop_id numeric NOT NULL,
                                      uid text NULL,
                                      hash text NULL,
                                      date_created timestamptz NOT NULL,
                                      date_updated timestamptz NULL,
                                      CONSTRAINT requests_pkey PRIMARY KEY (id)
);


-- public."user" definition

-- Drop table

-- DROP TABLE public."user";

CREATE TABLE IF NOT EXISTS public."user" (
                               id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                               steam_name varchar(255) NULL,
                               banned bool DEFAULT false NOT NULL,
                               date_created timestamptz NOT NULL,
                               date_updated timestamptz NULL,
                               steam_id numeric NULL,
                               discord_id numeric NULL,
                               CONSTRAINT users_pkey PRIMARY KEY (id)
);


-- public."version" definition

-- Drop table

-- DROP TABLE public."version";

CREATE TABLE IF NOT EXISTS public."version" (
                                  id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                  minimum text NULL,
                                  latest text NULL,
                                  date_created timestamptz NOT NULL,
                                  date_updated timestamptz NULL,
                                  CONSTRAINT versions_pkey PRIMARY KEY (id)
);


-- public.auth definition

-- Drop table

-- DROP TABLE public.auth;

CREATE TABLE IF NOT EXISTS public.auth (
                             id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                             id_user int4 NULL,
                             access_token text NULL,
                             access_token_expiry int8 NULL,
                             refresh_token text NULL,
                             refresh_token_expiry int8 NULL,
                             "type" int4 NULL,
                             date_created timestamptz NOT NULL,
                             date_updated timestamptz NULL,
                             CONSTRAINT auth_pkey PRIMARY KEY (id),
                             CONSTRAINT auth_user_foreign FOREIGN KEY (id_user) REFERENCES public."user"(id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS "IX_auth_user" ON public.auth USING btree (id_user);
COMMENT ON TABLE public.auth IS '@omit';


-- public.favorite definition

-- Drop table

-- DROP TABLE public.favorite;

CREATE TABLE IF NOT EXISTS public.favorite (
                                 id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                 id_user int4 NOT NULL,
                                 date_created timestamptz NOT NULL,
                                 date_updated timestamptz NULL,
                                 id_level int4 NOT NULL,
                                 CONSTRAINT favorites_pkey PRIMARY KEY (id),
                                 CONSTRAINT favorite_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id),
                                 CONSTRAINT favorites_user_foreign FOREIGN KEY (id_user) REFERENCES public."user"(id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS "IX_favorites_user" ON public.favorite USING btree (id_user);


-- public.level_item definition

-- Drop table

-- DROP TABLE public.level_item;

CREATE TABLE IF NOT EXISTS public.level_item (
                                   id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                   id_level int4 NOT NULL,
                                   workshop_id numeric NOT NULL,
                                   author_id numeric NOT NULL,
                                   "name" text NOT NULL,
                                   image_url text NOT NULL,
                                   file_author text NOT NULL,
                                   file_uid text NOT NULL,
                                   validation_time_author float4 NOT NULL,
                                   validation_time_gold float4 NOT NULL,
                                   validation_time_silver float4 NOT NULL,
                                   validation_time_bronze float4 NOT NULL,
                                   deleted bool NOT NULL,
                                   created_at timestamptz NOT NULL,
                                   updated_at timestamptz NOT NULL,
                                   date_created timestamptz NOT NULL,
                                   date_updated timestamptz NULL,
                                   CONSTRAINT level_item_pkey PRIMARY KEY (id),
                                   CONSTRAINT level_item_id_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id)
);


-- public.level_metadata definition

-- Drop table

-- DROP TABLE public.level_metadata;

CREATE TABLE IF NOT EXISTS public.level_metadata (
                                       id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                       id_level int4 NOT NULL,
                                       amount_checkpoints int4 NOT NULL,
                                       amount_finishes int4 NOT NULL,
                                       amount_blocks int4 NOT NULL,
                                       type_ground int4 NOT NULL,
                                       type_skybox int4 NOT NULL,
                                       blocks jsonb NOT NULL,
                                       date_created timestamptz NOT NULL,
                                       date_updated timestamptz NULL,
                                       CONSTRAINT level_metadata_pkey PRIMARY KEY (id),
                                       CONSTRAINT level_metadata_id_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id)
);


-- public.level_points definition

-- Drop table

-- DROP TABLE public.level_points;

CREATE TABLE IF NOT EXISTS public.level_points (
                                     id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                     points int4 NOT NULL,
                                     id_level int4 NOT NULL,
                                     date_created timestamptz NOT NULL,
                                     date_updated timestamptz NULL,
                                     CONSTRAINT level_points_pkey PRIMARY KEY (id),
                                     CONSTRAINT level_points_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id)
);


-- public.record definition

-- Drop table

-- DROP TABLE public.record;

CREATE TABLE IF NOT EXISTS public.record (
                               id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                               id_user int4 NOT NULL,
                               "time" float4 NOT NULL,
                               game_version varchar(255) NOT NULL,
                               id_level int4 NOT NULL,
                               mod_version varchar(255) NOT NULL,
                               date_created timestamptz NOT NULL,
                               date_updated timestamptz NULL,
                               splits _float4 NULL,
                               speeds _float4 NULL,
                               CONSTRAINT records_pkey PRIMARY KEY (id),
                               CONSTRAINT record_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id),
                               CONSTRAINT records_user_foreign FOREIGN KEY (id_user) REFERENCES public."user"(id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS "IX_records_user" ON public.record USING btree (id_user);


-- public.record_media definition

-- Drop table

-- DROP TABLE public.record_media;

CREATE TABLE IF NOT EXISTS public.record_media (
                                     id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                     id_record int4 NOT NULL,
                                     ghost_url text NULL,
                                     date_created timestamptz NOT NULL,
                                     date_updated timestamptz NULL,
                                     CONSTRAINT media_pkey PRIMARY KEY (id),
                                     CONSTRAINT media_record_fkey FOREIGN KEY (id_record) REFERENCES public.record(id)
);
CREATE INDEX IF NOT EXISTS "IX_media_record" ON public.record_media USING btree (id_record);


-- public.upvote definition

-- Drop table

-- DROP TABLE public.upvote;

CREATE TABLE IF NOT EXISTS public.upvote (
                               id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                               id_user int4 NOT NULL,
                               id_level int4 NOT NULL,
                               date_created timestamptz NOT NULL,
                               date_updated timestamptz NULL,
                               CONSTRAINT upvotes_pkey PRIMARY KEY (id),
                               CONSTRAINT upvote_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id),
                               CONSTRAINT upvotes_user_foreign FOREIGN KEY (id_user) REFERENCES public."user"(id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS "IX_upvotes_user" ON public.upvote USING btree (id_user);



-- public.user_points definition

-- Drop table

-- DROP TABLE public.user_points;

CREATE TABLE IF NOT EXISTS public.user_points (
                                    id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                    id_user int4 NOT NULL,
                                    points int4 NOT NULL,
                                    date_created timestamptz NOT NULL,
                                    date_updated timestamptz NULL,
                                    "rank" int4 DEFAULT 0 NOT NULL,
                                    world_records int4 DEFAULT 0 NULL,
                                    CONSTRAINT player_points_pkey PRIMARY KEY (id),
                                    CONSTRAINT player_points_user_fkey FOREIGN KEY (id_user) REFERENCES public."user"(id) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS "IX_player_points_user" ON public.user_points USING btree (id_user);


-- public.vote definition

-- Drop table

-- DROP TABLE public.vote;

CREATE TABLE IF NOT EXISTS public.vote (
                             id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                             id_user int4 NOT NULL,
                             id_level int4 NOT NULL,
                             value int4 NOT NULL,
                             date_created timestamptz NOT NULL,
                             date_updated timestamptz NULL,
                             CONSTRAINT vote_pkey PRIMARY KEY (id),
                             CONSTRAINT vote_id_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id),
                             CONSTRAINT vote_id_user_fkey FOREIGN KEY (id_user) REFERENCES public."user"(id)
);


-- public.world_record_global definition

-- Drop table

-- DROP TABLE public.world_record_global;

CREATE TABLE IF NOT EXISTS public.world_record_global (
                                            id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                            id_record int4 NOT NULL,
                                            id_level int4 NOT NULL,
                                            date_created timestamptz NOT NULL,
                                            date_updated timestamptz NULL,
                                            CONSTRAINT world_records_global_pkey PRIMARY KEY (id),
                                            CONSTRAINT world_record_global_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id),
                                            CONSTRAINT world_records_global_record_fkey FOREIGN KEY (id_record) REFERENCES public.record(id)
);
CREATE INDEX IF NOT EXISTS "IX_world_records_record" ON public.world_record_global USING btree (id_record);


-- public.personal_best_global definition

-- Drop table

-- DROP TABLE public.personal_best_global;

CREATE TABLE IF NOT EXISTS public.personal_best_global (
                                             id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                                             id_record int4 NOT NULL,
                                             id_user int4 NOT NULL,
                                             id_level int4 NOT NULL,
                                             date_created timestamptz NOT NULL,
                                             date_updated timestamptz NULL,
                                             CONSTRAINT personal_bests_global_pkey PRIMARY KEY (id),
                                             CONSTRAINT personal_best_global_level_fkey FOREIGN KEY (id_level) REFERENCES public."level"(id),
                                             CONSTRAINT personal_bests_global_record_fkey FOREIGN KEY (id_record) REFERENCES public.record(id),
                                             CONSTRAINT personal_bests_global_user_fkey FOREIGN KEY (id_user) REFERENCES public."user"(id)
);
CREATE INDEX IF NOT EXISTS "IX_personal_bests_record" ON public.personal_best_global USING btree (id_record);
CREATE INDEX IF NOT EXISTS "IX_personal_bests_user" ON public.personal_best_global USING btree (id_user);


-- public.sampled_favorite source

CREATE OR REPLACE VIEW public.sampled_favorite
AS SELECT favorite.id,
          favorite.id_user,
          favorite.date_created,
          favorite.date_updated,
          favorite.id_level
   FROM favorite TABLESAMPLE bernoulli (1);


-- public.sampled_level source

CREATE OR REPLACE VIEW public.sampled_level
AS SELECT level.id,
          level.hash,
          level.date_created,
          level.date_updated
   FROM level TABLESAMPLE bernoulli (1);


-- public.sampled_level_item source

CREATE OR REPLACE VIEW public.sampled_level_item
AS SELECT level_item.id,
          level_item.id_level,
          level_item.workshop_id,
          level_item.author_id,
          level_item.name,
          level_item.image_url,
          level_item.file_author,
          level_item.file_uid,
          level_item.validation_time_author,
          level_item.validation_time_gold,
          level_item.validation_time_silver,
          level_item.validation_time_bronze,
          level_item.deleted,
          level_item.created_at,
          level_item.updated_at,
          level_item.date_created,
          level_item.date_updated
   FROM level_item TABLESAMPLE bernoulli (1);


-- public.sampled_level_metadata source

CREATE OR REPLACE VIEW public.sampled_level_metadata
AS SELECT level_metadata.id,
          level_metadata.id_level,
          level_metadata.amount_checkpoints,
          level_metadata.amount_finishes,
          level_metadata.amount_blocks,
          level_metadata.type_ground,
          level_metadata.type_skybox,
          level_metadata.blocks,
          level_metadata.date_created,
          level_metadata.date_updated
   FROM level_metadata TABLESAMPLE bernoulli (1);


-- public.sampled_level_points source

CREATE OR REPLACE VIEW public.sampled_level_points
AS SELECT level_points.id,
          level_points.points,
          level_points.id_level,
          level_points.date_created,
          level_points.date_updated
   FROM level_points TABLESAMPLE bernoulli (1);


-- public.sampled_level_request source

CREATE OR REPLACE VIEW public.sampled_level_request
AS SELECT level_request.id,
          level_request.workshop_id,
          level_request.uid,
          level_request.hash,
          level_request.date_created,
          level_request.date_updated
   FROM level_request TABLESAMPLE bernoulli (1);


-- public.sampled_personal_best_global source

CREATE OR REPLACE VIEW public.sampled_personal_best_global
AS SELECT personal_best_global.id,
          personal_best_global.id_record,
          personal_best_global.id_user,
          personal_best_global.id_level,
          personal_best_global.date_created,
          personal_best_global.date_updated
   FROM personal_best_global TABLESAMPLE bernoulli (1);


-- public.sampled_record source

CREATE OR REPLACE VIEW public.sampled_record
AS SELECT record.id,
          record.id_user,
          record."time",
          record.game_version,
          record.id_level,
          record.mod_version,
          record.date_created,
          record.date_updated,
          record.splits,
          record.speeds
   FROM record TABLESAMPLE bernoulli (1);


-- public.sampled_record_media source

CREATE OR REPLACE VIEW public.sampled_record_media
AS SELECT record_media.id,
          record_media.id_record,
          record_media.ghost_url,
          record_media.date_created,
          record_media.date_updated
   FROM record_media TABLESAMPLE bernoulli (1);


-- public.sampled_upvote source

CREATE OR REPLACE VIEW public.sampled_upvote
AS SELECT upvote.id,
          upvote.id_user,
          upvote.id_level,
          upvote.date_created,
          upvote.date_updated
   FROM upvote TABLESAMPLE bernoulli (1);


-- public.sampled_user source

CREATE OR REPLACE VIEW public.sampled_user
AS SELECT "user".id,
          "user".steam_name,
          "user".banned,
          "user".date_created,
          "user".date_updated,
          "user".steam_id,
          "user".discord_id
   FROM "user" TABLESAMPLE bernoulli (1);


-- public.sampled_user_points source

CREATE OR REPLACE VIEW public.sampled_user_points
AS SELECT user_points.id,
          user_points.id_user,
          user_points.points,
          user_points.date_created,
          user_points.date_updated,
          user_points.rank,
          user_points.world_records
   FROM user_points TABLESAMPLE bernoulli (1);


-- public.sampled_version source

CREATE OR REPLACE VIEW public.sampled_version
AS SELECT version.id,
          version.minimum,
          version.latest,
          version.date_created,
          version.date_updated
   FROM version TABLESAMPLE bernoulli (1);


-- public.sampled_world_record_global source

CREATE OR REPLACE VIEW public.sampled_world_record_global
AS SELECT world_record_global.id,
          world_record_global.id_record,
          world_record_global.id_level,
          world_record_global.date_created,
          world_record_global.date_updated
   FROM world_record_global TABLESAMPLE bernoulli (1);



-- DROP FUNCTION public.update_world_record_global();

CREATE OR REPLACE FUNCTION public.update_world_record_global()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
rec record;
    existing_record world_record_global%ROWTYPE;
    counter INTEGER := 0;
    total_records INTEGER;
BEGIN
    -- Get the total number of records to process for progress tracking
SELECT COUNT(*) INTO total_records FROM record WHERE is_valid;

FOR rec IN
SELECT * FROM record WHERE is_valid ORDER BY date_created ASC
    LOOP
        -- Increment the counter
        counter := counter + 1;

-- Log progress every 100 records or at the end
IF counter % 100 = 0 OR counter = total_records THEN
            RAISE NOTICE 'Processing record % / %, ID: %, Level: %', counter, total_records, rec.id, rec.id_level;
END IF;

        -- Check if there is an existing world record for the same level
SELECT *
INTO existing_record
FROM world_record_global
WHERE id_level = rec.id_level
ORDER BY date_created DESC
    LIMIT 1;

IF existing_record.id IS NULL THEN
            -- No existing record, insert a new world record
            INSERT INTO world_record_global (id_record, id_level, date_created, date_updated)
            VALUES (rec.id, rec.id_level, rec.date_created, rec.date_updated);
        ELSIF rec.time < (
            SELECT r.time FROM record r WHERE r.id = existing_record.id_record
        ) THEN
            -- Current record is better, update the existing world record
UPDATE world_record_global
SET id_record = rec.id,
    date_updated = rec.date_updated
WHERE id = existing_record.id;
END IF;
END LOOP;

    -- Log completion
    RAISE NOTICE 'World record update complete. Processed % records.', total_records;
END;
$function$
;

-- DROP FUNCTION public.z_rtm(float4, float4, int4, int4, _int4, _text, int4, int4, int4, int4, int4, int4, int4);

CREATE OR REPLACE FUNCTION public.z_rtm(p_min_author_time real DEFAULT NULL::real, p_max_author_time real DEFAULT NULL::real, p_min_records integer DEFAULT NULL::integer, p_max_records integer DEFAULT NULL::integer, p_excluded_author_ids integer[] DEFAULT NULL::integer[], p_excluded_hashes text[] DEFAULT NULL::text[], p_min_checkpoints integer DEFAULT NULL::integer, p_max_checkpoints integer DEFAULT NULL::integer, p_min_finishes integer DEFAULT NULL::integer, p_max_finishes integer DEFAULT NULL::integer, p_min_blocks integer DEFAULT NULL::integer, p_max_blocks integer DEFAULT NULL::integer, p_sample_size integer DEFAULT NULL::integer)
 RETURNS TABLE(id integer, id_level integer, workshop_id numeric, author_id numeric, name text, image_url text, file_author text, file_uid text, validation_time_author real, validation_time_gold real, validation_time_silver real, validation_time_bronze real, deleted boolean, created_at timestamp with time zone, updated_at timestamp with time zone, date_created timestamp with time zone, date_updated timestamp with time zone, amount_checkpoints integer, amount_finishes integer, amount_blocks integer, num_records bigint)
 LANGUAGE plpgsql
 STABLE
AS $function$
BEGIN
RETURN QUERY
SELECT
    li.id,
    li.id_level,
    li.workshop_id,
    li.author_id,
    li.name,
    li.image_url,
    li.file_author,
    li.file_uid,
    li.validation_time_author,
    li.validation_time_gold,
    li.validation_time_silver,
    li.validation_time_bronze,
    li.deleted,
    li.created_at,
    li.updated_at,
    li.date_created,
    li.date_updated,
    lm.amount_checkpoints,
    lm.amount_finishes,     -- Include in select if needed
    lm.amount_blocks,       -- Include in select if needed
    COALESCE(rc.num_records, 0) AS num_records
FROM
    level_item li
        LEFT JOIN level_metadata lm ON li.id_level = lm.id_level
        LEFT JOIN (
        SELECT
            r.id_level,
            COUNT(*) AS num_records
        FROM
            record r
        GROUP BY
            r.id_level
    ) rc ON li.id_level = rc.id_level
        -- Existing JOIN to access the hash field from the level table
        JOIN level l ON li.id_level = l.id
WHERE
    (p_min_author_time IS NULL OR li.validation_time_author >= p_min_author_time)
  AND (p_max_author_time IS NULL OR li.validation_time_author <= p_max_author_time)
  AND (p_min_records IS NULL OR COALESCE(rc.num_records, 0) >= p_min_records)
  AND (p_max_records IS NULL OR COALESCE(rc.num_records, 0) <= p_max_records)
  AND (p_excluded_author_ids IS NULL OR li.author_id <> ALL (p_excluded_author_ids))
  AND (p_excluded_hashes IS NULL OR l.hash <> ALL (p_excluded_hashes))
  AND (p_min_checkpoints IS NULL OR lm.amount_checkpoints >= p_min_checkpoints)
  AND (p_max_checkpoints IS NULL OR lm.amount_checkpoints <= p_max_checkpoints)
  AND (p_min_finishes IS NULL OR lm.amount_finishes >= p_min_finishes)      -- New condition
  AND (p_max_finishes IS NULL OR lm.amount_finishes <= p_max_finishes)      -- New condition
  AND (p_min_blocks IS NULL OR lm.amount_blocks >= p_min_blocks)            -- New condition
  AND (p_max_blocks IS NULL OR lm.amount_blocks <= p_max_blocks)            -- New condition
ORDER BY RANDOM()
    LIMIT p_sample_size;
END;
$function$
;

COMMENT ON FUNCTION public.z_rtm(float4, float4, int4, int4, _int4, _text, int4, int4, int4, int4, int4, int4, int4) IS 'Retrieves filtered level items based on specified criteria.';